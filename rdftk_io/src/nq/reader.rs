#![allow(clippy::upper_case_acronyms)] // << generated by pest.

use crate::common::ReaderOptions;
use objio::{impl_has_options, HasOptions, ObjectReader};
use pest::Parser as _;
use pest_derive::Parser;
use rdftk_core::{
    error::{read_write_error_with, Error},
    model::graph::NamedGraphRef,
};
use std::io::Read;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

#[derive(Debug, Default)]
pub struct NQuadReader {
    options: ReaderOptions,
}

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

#[derive(Parser)]
#[grammar = "nq/nq.pest"]
struct NQuadParser;

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl_has_options!(NQuadReader, ReaderOptions);

impl ObjectReader<NamedGraphRef> for NQuadReader {
    type Error = Error;

    fn read<R>(&self, r: &mut R) -> Result<NamedGraphRef, Self::Error>
    where
        R: Read,
    {
        let mut buffer = String::new();
        r.read_to_string(&mut buffer)?;

        let mut parsed = NQuadParser::parse(Rule::nquadsDoc, &buffer)
            .map_err(|e| read_write_error_with(super::NAME, e))?;
        let top_node = parsed.next().unwrap();

        let factory = self.options().factory().clone();
        //ntriples_doc(top_node, factory)
        todo!()
    }
}

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn parse_simple_1() {
        let reader = NQuadReader::default();
        assert!(reader.read_from_string(
            r###"
<http://one.example/subject1> <http://one.example/predicate1> <http://one.example/object1> <http://example.org/graph3> . # comments here
# or on a line by themselves
_:subject1 <http://an.example/predicate1> "object1" <http://example.org/graph1> .
_:subject2 <http://an.example/predicate2> "object2" <http://example.org/graph5> .
"###).is_ok());
    }

    #[test]
    fn parse_simple_2() {
        let reader = NQuadReader::default();
        assert!(reader
            .read_from_string(
                r###"
_:alice <http://xmlns.com/foaf/0.1/knows> _:bob <http://example.org/graphs/john> .
_:bob <http://xmlns.com/foaf/0.1/knows> _:alice <http://example.org/graphs/james> .
"###,
            )
            .is_ok());
    }
}
